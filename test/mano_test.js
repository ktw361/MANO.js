import * as fs from 'fs';
import * as tf from '@tensorflow/tfjs';
import * as mano from './../mano.js';

function Rodrigues_forward_test() {
    const vec = tf.tensor([2.90096335, 5.67236714, 6.29441052]);
    const exp = tf.tensor([
        [-0.6936258,   0.07068303,  0.71685923],
        [0.70566722, - 0.13313241,  0.69592351],
        [0.14462718,  0.98857457 ,  0.04246537],
    ])
    const actual = mano.Rodrigues_forward(vec);
    tf.test_util.expectArraysClose(
        actual.dataSync(),
        exp.dataSync());
}

function lrotmin_test() {
    const p = tf.tensor([0.81720625, 0.01314573, 0.4378887 , 0.76269586, 0.51953055,
        0.0764772 , 0.12526804, 0.44460912, 0.36137866, 0.27988369,
        0.28000162, 0.89118801, 0.8915919 , 0.06981641, 0.41595728,
        0.62566505, 0.98150397, 0.15664253, 0.73022887, 0.36028722,
        0.40865511, 0.15587965, 0.82831608, 0.22799861, 0.0762253 ,
        0.25917093, 0.81130252, 0.02415787, 0.87352738, 0.23992585,
        0.07860742, 0.88115517, 0.79258042, 0.15306407, 0.18350379,
        0.37027924, 0.34615021, 0.45762193, 0.55186815, 0.94067075,
        0.11673419, 0.71683745, 0.38568162, 0.11910606, 0.38726201,
        0.98737646, 0.91783239, 0.33566301]);
    const actual = mano.lrotmin(p);
    const exp = tf.tensor([-0.1283054 ,  0.1183566 ,  0.47554204,  0.2503704 , -0.2733758 ,
        -0.63979054, -0.42126379,  0.67676361, -0.39623859, -0.15948478,
        -0.31395664,  0.44154885,  0.36807372, -0.07107064, -0.04014962,
        -0.39756245,  0.1962689 , -0.10366155, -0.40281037, -0.72033216,
         0.35282591,  0.79268325, -0.40277989, -0.12239852, -0.12254714,
         0.35277432, -0.0723511 , -0.08196631, -0.32303904,  0.22991285,
         0.38040124, -0.445993  , -0.74052085,  0.11184382,  0.76728223,
        -0.36851845, -0.43971413,  0.15030078,  0.8145486 ,  0.39637161,
        -0.18516115, -0.42299787, -0.72730276,  0.55986366, -0.60303227,
        -0.13841775, -0.23172709,  0.45163988,  0.47711724, -0.32655925,
        -0.56465625, -0.17330655,  0.70198298, -0.30921441, -0.34618689,
        -0.13955244,  0.74367569,  0.26067256, -0.03577848, -0.04823563,
        -0.7103367 ,  0.22539293, -0.33320183, -0.34112263, -0.70669496,
         0.25780391,  0.72527555, -0.31226742,  0.03161125, -0.19963966,
         0.16615094, -0.03432   , -0.38298605, -0.19856163,  0.76149003,
         0.21825903, -0.02713805,  0.07682856, -0.75607988,  0.11879778,
        -0.35639274, -0.62352769, -0.58818384,  0.7157572 ,  0.64967935,
        -0.28160166,  0.2486374 , -0.66044329,  0.37140757, -0.34741202,
        -0.08401713, -0.34459173,  0.20550408,  0.37222792, -0.07897698,
        -0.11473002, -0.14973897,  0.18158509, -0.02809203, -0.2436985 ,
        -0.42028542,  0.50136633,  0.57049969, -0.20121626, -0.19098333,
        -0.32021577,  0.43047032, -0.15610595, -0.23412534, -0.51088445,
         0.39042678,  0.60836228, -0.62082627, -0.69722494,  0.2081618 ,
         0.77150785, -0.39879762, -0.07996099, -0.34500359,  0.18574376,
         0.38975519, -0.14550679, -0.34341265, -0.04023818,  0.38834762,
        -0.07936597, -0.40551263,  0.14713152,  0.79052962,  0.62242066,
        -0.46176808, -0.56824196, -0.50909458,  0.82985464, -0.77160562]);
    tf.test_util.expectArraysClose(actual.dataSync(),exp.dataSync());
}

function posemap_axisang_test() {
    const p = tf.tensor([[0.99976541, 0.81840049, 0.61580582, 0.29755222, 0.75263576,
        0.23646458, 0.1500412, 0.96680194, 0.3422395, 0.39912522,
        0.71703791, 0.70733972, 0.00283966, 0.78256418, 0.8078174,
        0.69082749, 0.25433204, 0.32828556, 0.78538394, 0.00623203,
        0.47232044, 0.13343615, 0.21331753, 0.95925272, 0.74511419,
        0.53695342, 0.96512923, 0.31084636, 0.45721882, 0.09986426,
        0.72665215, 0.39812931, 0.22516214, 0.34200778, 0.25302097,
        0.66617667, 0.24735797, 0.38986802, 0.42784312, 0.02762204,
        0.79949507, 0.67288871, 0.4120164, 0.47785463, 0.00615158,
        0.5237043, 0.44063322, 0.3963606]]);
    const [pose_mats_act, rot_mats_act] = mano.posemap_axisang(p);
    const pose_mats = tf.tensor([[-0.44085606, -0.08220656, 0.82498493, 0.76993485, -0.57943898,
    -0.47992577, -0.30750346, 0.90353224, -0.70155216, -0.29318377,
    -0.10393038, 0.69972086, 0.31492193, -0.06804764, -0.17969133,
    -0.63343112, 0.34736619, -0.30855099, -0.48048641, -0.21790309,
        0.82621055, 0.35043242, -0.06378882, 0.02656575, -0.77929632,
        0.27572969, -0.43726526, -0.45952242, -0.4472278, 0.71265088,
        0.70649499, -0.29879062, -0.0957613, -0.45689037, 0.55524112,
    -0.30504785, -0.56856268, -0.64695928, 0.62873328, 0.6489569,
    -0.29331074, 0.2818603, -0.6266712, 0.28641574, -0.27525919,
    -0.08165951, -0.21067956, 0.33505951, 0.37707011, -0.27700925,
    -0.57888039, -0.12028667, 0.65795023, -0.25660736, -0.10396915,
    -0.4066406, 0.17824742, 0.41120199, -0.39137269, -0.67859098,
        0.1674564, 0.68133414, -0.28743973, -0.44453843, -0.79646903,
        0.23895507, 0.82267562, -0.43178734, -0.01841732, -0.12110847,
        0.20681262, -0.02914405, -0.5248551, -0.53175591, 0.70105134,
        0.87606032, -0.6396871, -0.32045739, -0.08219273, 0.76642695,
    -0.36294892, -0.10666053, -0.02548017, 0.4486595, 0.16390564,
    -0.05191185, -0.27251387, -0.41842505, 0.31698522, -0.14885909,
    -0.098332, -0.06251867, 0.42788578, 0.33447782, -0.27201475,
    -0.59846643, -0.27407922, 0.68273633, -0.32268789, -0.24095815,
    -0.55788148, 0.33559458, 0.64000396, -0.26608298, -0.22750986,
    -0.11937503, 0.38747137, -0.08587991, -0.16206443, -0.35349617,
        0.41581779, 0.44679061, -0.11813848, -0.15065991, -0.31343601,
        0.31202678, -0.10311809, -0.49804371, -0.54679236, 0.6701179,
        0.56693691, -0.20685872, 0.22250718, -0.6531634, 0.26822569,
    -0.29188098, -0.11045269, 0.08946744, 0.44799682, 0.1009703,
    -0.08211803, -0.38379381, -0.44554526, 0.38663712, -0.19253411,
    -0.16666338, -0.24682134, 0.49460015, 0.46580195, -0.2046728,
    -0.38792162, -0.29762162, 0.55365501, -0.22225486]]);
    const rot_mats = tf.tensor([[-0.44085606, -0.08220656, 0.82498493, 0.76993485, -0.57943898,
    -0.47992577, -0.30750346, 0.90353224, -0.70155216, -0.29318377,
    -0.10393038, 0.69972086, 0.31492193, -0.06804764, -0.17969133,
    -0.63343112, 0.34736619, -0.30855099, -0.48048641, -0.21790309,
        0.82621055, 0.35043242, -0.06378882, 0.02656575, -0.77929632,
        0.27572969, -0.43726526, -0.45952242, -0.4472278, 0.71265088,
        0.70649499, -0.29879062, -0.0957613, -0.45689037, 0.55524112,
    -0.30504785, -0.56856268, -0.64695928, 0.62873328, 0.6489569,
    -0.29331074, 0.2818603, -0.6266712, 0.28641574, -0.27525919,
    -0.08165951, -0.21067956, 0.33505951, 0.37707011, -0.27700925,
    -0.57888039, -0.12028667, 0.65795023, -0.25660736, -0.10396915,
    -0.4066406, 0.17824742, 0.41120199, -0.39137269, -0.67859098,
        0.1674564, 0.68133414, -0.28743973, -0.44453843, -0.79646903,
        0.23895507, 0.82267562, -0.43178734, -0.01841732, -0.12110847,
        0.20681262, -0.02914405, -0.5248551, -0.53175591, 0.70105134,
        0.87606032, -0.6396871, -0.32045739, -0.08219273, 0.76642695,
    -0.36294892, -0.10666053, -0.02548017, 0.4486595, 0.16390564,
    -0.05191185, -0.27251387, -0.41842505, 0.31698522, -0.14885909,
    -0.098332, -0.06251867, 0.42788578, 0.33447782, -0.27201475,
    -0.59846643, -0.27407922, 0.68273633, -0.32268789, -0.24095815,
    -0.55788148, 0.33559458, 0.64000396, -0.26608298, -0.22750986,
    -0.11937503, 0.38747137, -0.08587991, -0.16206443, -0.35349617,
        0.41581779, 0.44679061, -0.11813848, -0.15065991, -0.31343601,
        0.31202678, -0.10311809, -0.49804371, -0.54679236, 0.6701179,
        0.56693691, -0.20685872, 0.22250718, -0.6531634, 0.26822569,
    -0.29188098, -0.11045269, 0.08946744, 0.44799682, 0.1009703,
    -0.08211803, -0.38379381, -0.44554526, 0.38663712, -0.19253411,
    -0.16666338, -0.24682134, 0.49460015, 0.46580195, -0.2046728,
    -0.38792162, -0.29762162, 0.55365501, -0.22225486]]);
    tf.test_util.expectArraysClose(pose_mats_act, pose_mats);
    tf.test_util.expectArraysClose(rot_mats_act, rot_mats);
}

function batch_rodrigues_test() {
    const p = tf.tensor([[0.5488135, 0.71518937, 0.60276338],
    [0.54488318, 0.4236548, 0.64589411],
    [0.43758721, 0.891773, 0.96366276],
    [0.38344152, 0.79172504, 0.52889492],
    [0.56804456, 0.92559664, 0.07103606],
    [0.0871293, 0.0202184, 0.83261985],
    [0.77815675, 0.87001215, 0.97861834],
    [0.79915856, 0.46147936, 0.78052918],
    [0.11827443, 0.63992102, 0.14335329],
    [0.94466892, 0.52184832, 0.41466194],
    [0.26455561, 0.77423369, 0.45615033],
    [0.56843395, 0.0187898, 0.6176355],
    [0.61209572, 0.616934, 0.94374808],
    [0.6818203, 0.3595079, 0.43703195],
    [0.6976312, 0.06022547, 0.66676672],
    [0.67063787, 0.21038256, 0.1289263]]);
    const actual = mano.batch_rodrigues(p);
    const exp = tf.tensor([[0.6038114, -0.31361763, 0.73284089, 0.66913379, 0.69905195,
        -0.25216332, -0.43321099, 0.64262769, 0.6319477],
    [0.72323223, -0.44683205, 0.52657028, 0.66098903, 0.66876846,
        -0.34035606, -0.2000716, 0.59421365, 0.77902599],
    [0.26713869, -0.51829193, 0.81241024, 0.85007743, 0.52381435,
        0.05465241, -0.45387804, 0.67601183, 0.58051936],
    [0.58514651, -0.30187128, 0.75264686, 0.57971621, 0.80471006,
        -0.12794854, -0.56703851, 0.51119023, 0.64587296],
    [0.60999865, 0.18012443, 0.7716585, 0.29576522, 0.85168809,
        -0.43260875, -0.73513576, 0.4921205, 0.46625405],
    [0.67296801, -0.73783169, 0.05213885, 0.73949274, 0.66958167,
        -0.06936053, 0.01626518, 0.08523372, 0.99622822],
    [0.29614721, -0.36383487, 0.88313137, 0.91965929, 0.35829441,
        -0.16078528, -0.25792174, 0.85979608, 0.44071201],
    [0.63657649, -0.44088375, 0.63276527, 0.76691302, 0.44841271,
        -0.45909745, -0.08133139, 0.77752657, 0.62356847],
    [0.79281521, -0.09651391, 0.60177164, 0.1694407, 0.98336014,
        -0.06551859, -0.58543479, 0.15390874, 0.79597626],
    [0.8015318, -0.10803978, 0.58811068, 0.54849084, 0.52452716,
        -0.65117513, -0.2381272, 0.8445109, 0.47968403],
    [0.62491898, -0.29716431, 0.7219208, 0.48744544, 0.87084252,
        -0.06348423, -0.60981408, 0.39156951, 0.68905741],
    [0.82004169, -0.54255042, 0.18212818, 0.5526183, 0.66792009,
        -0.49849351, 0.14881079, 0.50943282, 0.8475456],
    [0.4469048, -0.54105362, 0.71241637, 0.86964095, 0.44949192,
        -0.20416079, -0.20976346, 0.71078689, 0.67140248],
    [0.85008444, -0.26730004, 0.4537699, 0.4967963, 0.69296429,
        -0.5224882, -0.17478522, 0.6695903, 0.72187184],
    [0.79282176, -0.54820263, 0.26628468, 0.5870448, 0.56953113,
        -0.57533702, 0.16374385, 0.61246075, 0.77335618],
    [0.97083212, -0.05063665, 0.23435213, 0.18582459, 0.77656697,
        -0.60200745, -0.15150648, 0.62799655, 0.7633257]]);
    tf.test_util.expectArraysClose(actual.dataSync(), exp.dataSync());
}

function quat2mat_test() {
    const p = tf.tensor([[0.5488135, 0.71518937, 0.60276338, 0.54488318],
    [0.4236548, 0.64589411, 0.43758721, 0.891773],
    [0.96366276, 0.38344152, 0.79172504, 0.52889492],
    [0.56804456, 0.92559664, 0.07103606, 0.0871293],
    [0.0202184, 0.83261985, 0.77815675, 0.87001215],
    [0.97861834, 0.79915856, 0.46147936, 0.78052918],
    [0.11827443, 0.63992102, 0.14335329, 0.94466892],
    [0.52184832, 0.41466194, 0.26455561, 0.77423369],
    [0.45615033, 0.56843395, 0.0187898, 0.6176355],
    [0.61209572, 0.616934, 0.94374808, 0.6818203],
    [0.3595079, 0.43703195, 0.6976312, 0.06022547],
    [0.66676672, 0.67063787, 0.21038256, 0.1289263],
    [0.31542835, 0.36371077, 0.57019677, 0.43860151],
    [0.98837384, 0.10204481, 0.20887676, 0.16130952],
    [0.65310833, 0.2532916, 0.46631077, 0.24442559],
    [0.15896958, 0.11037514, 0.65632959, 0.13818295]]);
    const actual = mano.quat2mat(p);
    const exp = tf.tensor([[[0.10351641, 0.17930545, 0.97833221],
    [0.99140815, -0.09767958, -0.08699758],
    [0.07996393, 0.9789322, -0.18787633]],

    [[-0.24635469, -0.12020797, 0.96169611],
    [0.83420127, -0.53143241, 0.14726791],
    [0.4933737, 0.83852826, 0.23119851]],

    [[0.08531543, -0.20794349, 0.97441305],
    [0.82054645, 0.5694174, 0.04967233],
    [-0.56517678, 0.79531335, 0.21920738]],

    [[0.97879665, 0.02727659, 0.20301012],
    [0.1933558, -0.45015207, -0.87176639],
    [0.06760661, 0.89253521, -0.44588143]],

    [[-0.3252663, 0.6131164, 0.71992369],
    [0.64733679, -0.41059998, 0.64215476],
    [0.68931627, 0.67490439, -0.26333847]],

    [[0.320094, -0.32668092, 0.88928028],
    [0.93662841, -0.03192969, -0.34886634],
    [0.14236242, 0.94459519, 0.29575812]],

    [[-0.36624373, -0.02992343, 0.9300377],
    [0.3044886, -0.94831182, 0.08939455],
    [0.87929075, 0.31592607, 0.3564246]],

    [[-0.20217092, -0.52856608, 0.82446638],
    [0.92257299, -0.38526343, -0.02076465],
    [0.32861224, 0.75643241, 0.56552985]],

    [[0.16359348, -0.59375432, 0.78784071],
    [0.64054758, -0.54343414, -0.54256624],
    [0.75029059, 0.59340976, 0.29142561]],

    [[-0.28437954, 0.15623494, 0.94589583],
    [0.94709658, 0.19889782, 0.25188831],
    [-0.14878287, 0.96748659, -0.20453205]],

    [[-0.20982246, 0.69886462, 0.68378562],
    [0.805712, 0.51977839, -0.28400459],
    [-0.55389775, 0.49134374, -0.67214479]],

    [[0.87252554, 0.1154226, 0.47473868],
    [0.4753989, 0.02351462, -0.87945605],
    [-0.1126724, 0.99303811, -0.03435468]],

    [[-0.38132143, 0.18428279, 0.90588842],
    [0.92284808, 0.1334122, 0.36132063],
    [-0.05427139, 0.97377669, -0.22093795]],

    [[0.86820473, -0.26135543, 0.4217984],
    [0.34202098, 0.93105817, -0.12709182],
    [-0.35950271, 0.25460563, 0.89773814]],

    [[0.27805499, -0.1081494, 0.95445751],
    [0.72340194, 0.67729904, -0.13399866],
    [-0.63196128, 0.72771541, 0.26656186]],

    [[-0.84628488, 0.20715706, 0.49080328],
    [0.38746584, 0.87163511, 0.30020402],
    [-0.36561199, 0.44422763, -0.8179179]]]);
    tf.test_util.expectArraysClose(actual.dataSync(), exp.dataSync());
}

function subtract_flat_id_test() {
    const p = tf.tensor([[0.5488135, 0.71518937, 0.60276338, 0.54488318, 0.4236548,
        0.64589411, 0.43758721, 0.891773, 0.96366276, 0.38344152,
        0.79172504, 0.52889492, 0.56804456, 0.92559664, 0.07103606,
        0.0871293, 0.0202184, 0.83261985, 0.77815675, 0.87001215,
        0.97861834, 0.79915856, 0.46147936, 0.78052918, 0.11827443,
        0.63992102, 0.14335329, 0.94466892, 0.52184832, 0.41466194,
        0.26455561, 0.77423369, 0.45615033, 0.56843395, 0.0187898,
        0.6176355, 0.61209572, 0.616934, 0.94374808, 0.6818203,
        0.3595079, 0.43703195, 0.6976312, 0.06022547, 0.66676672,
        0.67063787, 0.21038256, 0.1289263, 0.31542835, 0.36371077,
        0.57019677, 0.43860151, 0.98837384, 0.10204481, 0.20887676,
        0.16130952, 0.65310833, 0.2532916, 0.46631077, 0.24442559,
        0.15896958, 0.11037514, 0.65632959, 0.13818295, 0.19658236,
        0.36872517, 0.82099323, 0.09710128, 0.83794491, 0.09609841,
        0.97645947, 0.4686512, 0.97676109, 0.60484552, 0.73926358,
        0.03918779, 0.28280696, 0.12019656, 0.2961402, 0.11872772,
        0.31798318, 0.41426299, 0.0641475, 0.69247212, 0.56660145,
        0.26538949, 0.52324805, 0.09394051, 0.5759465, 0.9292962,
        0.31856895, 0.66741038, 0.13179786, 0.7163272, 0.28940609,
        0.18319136, 0.58651293, 0.02010755, 0.82894003, 0.00469548,
        0.67781654, 0.27000797, 0.73519402, 0.96218855, 0.24875314,
        0.57615733, 0.59204193, 0.57225191, 0.22308163, 0.95274901,
        0.44712538, 0.84640867, 0.69947928, 0.29743695, 0.81379782,
        0.39650574, 0.8811032, 0.58127287, 0.88173536, 0.69253159,
        0.72525428, 0.50132438, 0.95608363, 0.6439902, 0.42385505,
        0.60639321, 0.0191932, 0.30157482, 0.66017354, 0.29007761,
        0.61801543, 0.4287687, 0.13547406, 0.29828233, 0.56996491,
        0.59087276, 0.57432525, 0.65320082, 0.65210327, 0.43141844,
        0.8965466, 0.36756187, 0.43586493, 0.89192336]]);
    const actual = mano.subtract_flat_id(p);
    const exp = tf.tensor([[-0.4511865, 0.71518937, 0.60276338, 0.54488318, -0.5763452,
        0.64589411, 0.43758721, 0.891773, -0.03633724, -0.61655848,
        0.79172504, 0.52889492, 0.56804456, -0.07440336, 0.07103606,
        0.0871293, 0.0202184, -0.16738015, -0.22184325, 0.87001215,
        0.97861834, 0.79915856, -0.53852064, 0.78052918, 0.11827443,
        0.63992102, -0.85664671, -0.05533108, 0.52184832, 0.41466194,
        0.26455561, -0.22576631, 0.45615033, 0.56843395, 0.0187898,
    -0.3823645, -0.38790428, 0.616934, 0.94374808, 0.6818203,
    -0.6404921, 0.43703195, 0.6976312, 0.06022547, -0.33323328,
    -0.32936213, 0.21038256, 0.1289263, 0.31542835, -0.63628923,
        0.57019677, 0.43860151, 0.98837384, -0.89795519, -0.79112324,
        0.16130952, 0.65310833, 0.2532916, -0.53368923, 0.24442559,
        0.15896958, 0.11037514, -0.34367041, -0.86181705, 0.19658236,
        0.36872517, 0.82099323, -0.90289872, 0.83794491, 0.09609841,
        0.97645947, -0.5313488, -0.02323891, 0.60484552, 0.73926358,
        0.03918779, -0.71719304, 0.12019656, 0.2961402, 0.11872772,
    -0.68201682, -0.58573701, 0.0641475, 0.69247212, 0.56660145,
    -0.73461051, 0.52324805, 0.09394051, 0.5759465, -0.0707038,
    -0.68143105, 0.66741038, 0.13179786, 0.7163272, -0.71059391,
        0.18319136, 0.58651293, 0.02010755, -0.17105997, -0.99530452,
        0.67781654, 0.27000797, 0.73519402, -0.03781145, 0.24875314,
        0.57615733, 0.59204193, -0.42774809, -0.77691837, 0.95274901,
        0.44712538, 0.84640867, -0.30052072, 0.29743695, 0.81379782,
        0.39650574, -0.1188968, -0.41872713, 0.88173536, 0.69253159,
        0.72525428, -0.49867562, 0.95608363, 0.6439902, 0.42385505,
    -0.39360679, -0.9808068, 0.30157482, 0.66017354, 0.29007761,
    -0.38198457, 0.4287687, 0.13547406, 0.29828233, -0.43003509,
    -0.40912724, 0.57432525, 0.65320082, 0.65210327, -0.56858156,
        0.8965466, 0.36756187, 0.43586493, -0.10807664]]);
    tf.test_util.expectArraysClose(actual.dataSync(), exp.dataSync());
}

function with_zeros_test() {
    const p = tf.tensor([[[0.5488135, 0.71518937, 0.60276338, 0.54488318],
    [0.4236548, 0.64589411, 0.43758721, 0.891773],
    [0.96366276, 0.38344152, 0.79172504, 0.52889492]]]);
    const actual = mano.with_zeros(p);
    const exp = tf.tensor([[[0.5488135, 0.71518937, 0.60276338, 0.54488318],
    [0.4236548, 0.64589411, 0.43758721, 0.891773],
    [0.96366276, 0.38344152, 0.79172504, 0.52889492],
    [0., 0., 0., 1.]]]);
    tf.test_util.expectArraysClose(actual.dataSync(), exp.dataSync());
}

function bmm_test() {
    const a = tf.tensor([[[0.4962566, 0.7682218, 0.08847743, 0.13203049],
    [0.30742282, 0.6340787, 0.4900934, 0.89644474],
    [0.45562798, 0.6323063, 0.34889346, 0.4017173]],

    [[0.02232575, 0.16885895, 0.29388845, 0.5185218],
    [0.6976676, 0.8000114, 0.16102946, 0.28226858],
    [0.68160856, 0.915194, 0.3970999, 0.8741559]]]);
    const b = tf.tensor([[[0.41940832, 0.55290705, 0.9527381, 0.03616482, 0.18523103],
    [0.37341738, 0.30510002, 0.9320004, 0.17591017, 0.26983356],
    [0.15067977, 0.03171951, 0.20812976, 0.929799, 0.7231092],
    [0.7423363, 0.5262958, 0.24365824, 0.58459234, 0.03315264]],

    [[0.13871688, 0.242235, 0.81546897, 0.7931606, 0.27825248],
    [0.4819588, 0.81978035, 0.99706656, 0.6984411, 0.5675464],
    [0.83524317, 0.20559883, 0.593172, 0.11234725, 0.15345693],
    [0.24170822, 0.7262365, 0.7010802, 0.20382375, 0.65105355]]],
        );
    const actual = mano._bmm(a, b);
    const exp = tf.tensor([[[0.6063443, 0.58106184, 1.2393706, 0.31253532, 0.36757013],
    [1.1050223, 0.8507743, 1.2042842, 1.1024019, 0.6121505],
    [0.7779888, 0.66732544, 1.1939008, 0.6869485, 0.5206199]],

    [[0.45527932, 0.5808279, 0.7244213, 0.27435055, 0.48473215],
    [0.68507624, 1.0629343, 1.6600019, 1.1877475, 0.85665435],
    [1.0786021, 1.6318548, 2.316742, 1.402621, 1.3391345]]],
        );
    tf.test_util.expectArraysClose(actual.dataSync(), exp.dataSync());
}

function test_functions() {
    bmm_test();

    Rodrigues_forward_test();
    lrotmin_test();

    quat2mat_test(); // callee of batch_rodrigues
    batch_rodrigues_test(); // callee of posemax_axisang
    subtract_flat_id_test(); // callee of posemax_axisang
    posemap_axisang_test();

    with_zeros_test();
}

function test_class() {
    let mano_obj = JSON.parse(fs.readFileSync('./data/MANO_RIGHT.json'));

    const test_1 = () => {
        let model = new mano.MANO(
            mano_obj
        );
        const poses = tf.zeros([1, 48]);
        const betas = tf.zeros([1]);
        const trans = tf.zeros([1, 3]);
        let [verts, jtr] = model.forward(poses, betas, trans, false);
        const jtr_exp = tf.tensor([[[ 95.66994  ,   6.383428 ,   6.1863055],
            [ 71.58022  ,  -9.138905 ,  31.99915  ],
            [ 51.946983 ,  -8.247619 ,  55.698708 ],
            [ 29.729244 , -13.68059  ,  70.222824 ],
            [  2.2312577, -18.095005 ,  90.9145   ],
            [  7.572688 ,   1.1830716,  26.872295 ],
            [-25.106215 ,   5.192427 ,  29.089365 ],
            [-47.262127 ,   3.8940043,  28.975246 ],
            [-70.5249   ,   4.6119733,  33.024513 ],
            [  1.0094867,   4.9044647,   2.8287647],
            [-30.173183 ,   6.765794 ,  -2.765744 ],
            [-53.077816 ,   5.5136905,  -6.7102585],
            [-78.99282  ,   6.146649 , -12.040861 ],
            [ 13.934374 ,   2.4260077, -20.486887 ],
            [-14.379904 ,   4.4930153, -25.585424 ],
            [-37.900414 ,   2.8049033, -33.21924  ],
            [-60.80423  ,   7.343061 , -40.20221  ],
            [ 26.882961 ,  -3.5569003, -37.023033 ],
            [  9.868553 ,  -3.4950755, -49.521812 ],
            [ -5.9983487,  -4.1862316, -59.853718 ],
            [-21.898844 ,  -1.6281185, -70.131676 ]]]);
        tf.test_util.expectArraysClose(jtr.dataSync(), jtr_exp.dataSync());
    }

    const test_2 = () => {
        let model = new mano.MANO(
            mano_obj,
            null,
            true,
            45,
            'right',
            false,
            'axisang',
            'axisang',
        );
        const poses = tf.tensor([[ 0.0000,  0.0000,  0.0000,  0.0838, -0.1959,  0.2546, -0.1168, -0.0063,
            0.1333,  0.0064,  0.0073,  0.5590, -0.0072, -0.1211,  0.3205, -0.2640,
           -0.0617,  0.6484,  0.0061,  0.0051,  0.5252, -0.3974,  0.4341,  0.3476,
            0.0420, -0.0096,  0.1859,  0.0019,  0.0220,  0.3267, -0.3641, -0.0919,
            0.1971, -0.2146, -0.0600,  0.6202, -0.0070, -0.0263,  0.5470,  0.8016,
            0.1269,  0.4128, -0.0225,  0.0121,  0.0111,  0.0336, -0.0757,  0.6056]])
        const betas = tf.zeros([1]);
        const trans = tf.zeros([1, 3]);
        let [verts, jtr] = model.forward(poses, betas, trans, false);
        let jtr_exp = tf.tensor([[[ 95.6699,   6.3834,   6.1863],
            [ 71.5802,  -9.1389,  31.9991],
            [ 59.6429, -32.4474,  48.1900],
            [ 45.1781, -54.6850,  53.6992],
            [ 37.4226, -86.6066,  51.1129],
            [  7.5727,   1.1831,  26.8723],
            [-24.8731,  -3.0905,  22.6407],
            [-44.4639, -12.4540,  18.0459],
            [-58.9665, -30.8025,  19.1250],
            [  1.0095,   4.9045,   2.8288],
            [-28.2742,  -3.0742,  -6.4410],
            [-38.9800, -23.2549, -10.8990],
            [-40.2956, -49.1638, -12.3658],
            [ 13.9344,   2.4260, -20.4869],
            [-13.4464,  -3.3198, -27.5044],
            [-26.5567, -24.3088, -28.8910],
            [-33.9151, -46.9444, -27.1974],
            [ 26.8830,  -3.5569, -37.0230],
            [  8.1907, -13.0518, -39.5046],
            [ -7.1808, -24.1087, -40.1734],
            [-20.4227, -35.8995, -40.2152]]]);

        tf.test_util.expectArraysClose(jtr.dataSync(), jtr_exp.dataSync(), 0.005);
    }

    test_1();
    test_2();
}

function test_threejs() {
    let mano_obj = JSON.parse(fs.readFileSync('./data/MANO_RIGHT.json'));

    let model = new mano.MANO(
        mano_obj
    );
    const poses = tf.zeros([1, 48]);
    const betas = tf.zeros([1]);
    const trans = tf.zeros([1, 3]);
    let mesh = model.forward_mesh(poses, betas, trans, false);
    console.log(mesh);
}

test_functions();
test_class();
test_threejs();